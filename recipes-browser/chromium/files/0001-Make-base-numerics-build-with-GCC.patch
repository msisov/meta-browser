From cbe6845263215e0f3981c2a4c7937dadb14bef0d Mon Sep 17 00:00:00 2001
From: Justin Schuh <jschuh@chromium.org>
Date: Fri, 21 Jul 2017 12:32:31 +0000
Subject: [PATCH] Make base/numerics build with GCC
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Disables the __builtin_adc intrinsics on GCC.

Bug: 746420
Change-Id: I1b16eaba85ca93c2d04dc25755565cd9e0386320
Reviewed-on: https://chromium-review.googlesource.com/580787
Reviewed-by: Pawe≈Ç Hajdan Jr. <phajdan.jr@chromium.org>
Commit-Queue: Justin Schuh <jschuh@chromium.org>
Cr-Commit-Position: refs/heads/master@{#488636}
---
 base/numerics/safe_math_clang_gcc_impl.h | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/base/numerics/safe_math_clang_gcc_impl.h b/base/numerics/safe_math_clang_gcc_impl.h
index fbedea475a51..f09d0253d71d 100644
--- a/base/numerics/safe_math_clang_gcc_impl.h
+++ b/base/numerics/safe_math_clang_gcc_impl.h
@@ -126,6 +126,7 @@ struct ClampedAddFastOp {
   }
 };
 
+#if defined(__clang__)  // Not supported on GCC.
 // This is the fastest negation on Intel, and a decent fallback on arm.
 __attribute__((always_inline)) inline int8_t ClampedNegate(uint8_t value) {
   uint8_t carry;
@@ -169,6 +170,7 @@ __attribute__((always_inline)) inline int64_t ClampedNegate(uint64_t value) {
 __attribute__((always_inline)) inline int64_t ClampedNegate(int64_t value) {
   return ClampedNegate(static_cast<uint64_t>(value));
 }
+#endif
 
 template <typename T, typename U>
 struct ClampedSubFastOp {
@@ -180,6 +182,7 @@ struct ClampedSubFastOp {
       return ClampedSubFastAsmOp<T, U>::template Do<V>(x, y);
     }
 
+#if defined(__clang__)  // Not supported on GCC.
     // Fast path for generic clamped negation.
     if (std::is_same<T, U>::value && std::is_same<U, V>::value &&
         IsCompileTimeConstant(x) && x == 0 && !IsCompileTimeConstant(y)) {
@@ -190,6 +193,7 @@ struct ClampedSubFastOp {
               IntegerBitsPlusSign<T>::value, std::is_signed<T>::value>::type>(
               y));
     }
+#endif
 
     V result;
     return !__builtin_sub_overflow(x, y, &result)
-- 
2.11.0

